{"version":3,"sources":["utils.js","styles.js","single-stack-pancake-sorter.js","multi-stack-pancake-sorter.js","App.js","serviceWorker.js","index.js"],"names":["checkIfAllPancakesAreHappy","pancakes","includes","flipValue","value","flipPancakes","pancakesAsArray","split","firstPancake","indextToFlipAt","indexOf","amountToFlip","length","pancakesThatGetFlipped","slice","reverse","map","pancakesThatStay","join","sortPancakeStack","flipCount","sortedPancakes","newFlipCount","Container","styled","div","ControlPanel","Button","button","GenerateButton","StepButton","SortButton","Input","input","InputFull","StatsContainer","StatBox","PancakesContainer","Pancake","isHappy","CenteredText","p","SingleStackPancakeSorter","useState","numberOfPancakesToGenerate","setNumberOfPancakesToGenerate","setPancakes","pancakeFlipCount","setFlipCount","areAllPancakesHappy","setAreAllPancakesHappy","onClick","newPancakes","Math","ceil","random","generateRandomPancakeStack","onChange","target","type","min","defaultValue","disabled","src","alt","pancake","Header","h1","PancakeFactory","pancakeStacks","setPancakeStacks","pancakeStacksResults","setPancakeStacksResults","numberOfTestCases","setNumberOfTestCases","filtered","filter","match","cleanAndSetInput","stack","originalStack","sortedStack","sortPancakeStacks","index","key","PageContainer","PageHeader","AppContainer","PancakesRevengeApp","Boolean","window","location","hostname","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50ac654b.chunk.js","sourcesContent":["export const checkIfAllPancakesAreHappy = (pancakes) => !pancakes.includes('-')\n\nexport const generateSinglePancake = () => Math.ceil(Math.random() * 2) - 1 ? '+' : '-'\n\nexport const generateRandomPancakeStack = (numberOfPancakesToGenerate) => {\n  let newPancakes = ''\n  while (newPancakes.length < numberOfPancakesToGenerate) {\n    newPancakes = newPancakes + generateSinglePancake()\n  }\n  return newPancakes\n}\nexport const flipValue = (value) => value === '-' ? '+' : '-'\n\nexport const flipPancakes = (pancakes) => {\n    const pancakesAsArray = pancakes.split('')\n    const firstPancake = pancakes[0]\n    const indextToFlipAt = pancakes.indexOf(flipValue(firstPancake))\n    const amountToFlip = indextToFlipAt === -1 ? pancakes.length : indextToFlipAt\n\n    const pancakesThatGetFlipped = pancakesAsArray.slice(0, amountToFlip).reverse().map((value) => flipValue(value))\n    const pancakesThatStay = pancakesAsArray.slice(amountToFlip);\n\n    const updatedPancakes = [...pancakesThatGetFlipped, ...pancakesThatStay].join('')\n\n    return  updatedPancakes\n  }\n\n  export const sortPancakeStack = (pancakes, flipCount = 0) => {\n    let sortedPancakes = pancakes\n    let newFlipCount = flipCount\n    while(!checkIfAllPancakesAreHappy(sortedPancakes)) {\n        sortedPancakes = flipPancakes(sortedPancakes)\n        newFlipCount = newFlipCount + 1\n    }\n    return {\n      pancakes: sortedPancakes,\n      flipCount: newFlipCount\n    }\n  }\n\n  export const sortPancakeStacks = (pancakeStacks) => {\n    const pancakeStacksAsArray = pancakeStacks.split(',')\n    const sortedStacks = pancakeStacksAsArray.map((stack) => {\n      const { pancakes, flipCount } = sortPancakeStack(stack)\n      return {\n        originalStack: stack,\n        sortedStack: pancakes,\n        flipCount\n      }\n    })\n    return sortedStacks\n  }","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  margin-bottom: 24px;\n  border-bottom: 4px solid gray;\n  &:last-child {\n    border-bottom: none;\n  }\n\n  & > p, & > small {\n    padding: 0 8px;\n  }\n`\n\nexport const ControlPanel = styled.div`\n  display: flex;\n  align-items: stretch;\n  border-bottom: 2px solid gray;\n`\n\nexport const Button = styled.button`\n  border: none;\n  min-width: 40px;\n  font-size: 16px;\n`\n\nexport const GenerateButton = styled(Button)`\n  background-color: #e7833c;\n`\n\nexport const StepButton = styled(Button)`\n  margin-left: auto;\n  background-color: #ff6758;\n`\n\nexport const SortButton = styled(Button)`\n  background-color: #ff2813;\n`\n\nexport const Input = styled.input`\n  width: 40px;\n  padding: 0 8px;\n  border: none;\n  border-right: solid 1px gray;\n  font-size: 16px;\n`\n\nexport const InputFull = styled.input`\n  flex: 1 1 auto;\n`\n\nexport const StatsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\n\nexport const StatBox = styled.div`\n  flex: 1 1 40px;\n  padding: 16px;\n  border-right: 1px solid gray;\n  border-bottom: 1px solid gray;\n  text-align: center;\n  &&:last-child {\n    border-right: none;\n  }\n\n  p {\n    margin: 0 0 8px 0;\n  }\n\n  img {\n    width: 60px;\n    height: auto;\n  }\n`\n\nexport const PancakesContainer = styled.div`\n  padding: 20px 0;\n`\nexport const Pancake = styled.div`\n  height: 20px;\n  width: 80px;\n  margin: 4px auto;\n  background: orange;\n  border-bottom: 10px solid brown;\n  border-radius: 50%;\n  transition: transform 0.2s ease-in-out;\n  transform: rotateZ(${({ isHappy }) => isHappy ? '0deg' : '180deg'});\n\n  &::before {\n    position: relative;\n    top: 2px;\n    display: block\n    content: '';\n    margin: 4px auto;\n    width: 16px;\n    height: 16px;\n    background-image: url('https://image.flaticon.com/icons/png/512/25/25361.png');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n`","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport {\n  checkIfAllPancakesAreHappy,\n  generateRandomPancakeStack,\n  flipPancakes,\n  sortPancakeStack\n} from './utils'\n\nimport {\n  Container,\n  ControlPanel,\n  GenerateButton,\n  StepButton,\n  SortButton,\n  Input,\n  StatsContainer,\n  StatBox,\n  PancakesContainer,\n  Pancake\n} from './styles'\n\nconst CenteredText = styled.p`\n  text-align: center;\n`\n\nexport const SingleStackPancakeSorter = () => {\n  const [numberOfPancakesToGenerate, setNumberOfPancakesToGenerate] = useState(5)\n  const [pancakes, setPancakes] = useState('++++++')\n  const [pancakeFlipCount, setFlipCount] = useState(0)\n  const [areAllPancakesHappy, setAreAllPancakesHappy] = useState(true)\n\n  return (\n    <Container>\n\n      <ControlPanel>\n        <GenerateButton onClick={() => {\n          const newPancakes = generateRandomPancakeStack(numberOfPancakesToGenerate)\n          setPancakes(newPancakes)\n          setAreAllPancakesHappy(checkIfAllPancakesAreHappy(newPancakes))\n          setFlipCount(0)\n        }}>\n          Generate Pancakes:\n        </GenerateButton>\n        <Input\n          onChange={({ target}) => setNumberOfPancakesToGenerate(target.value)}\n          type='number'\n          min='0'\n          defaultValue={numberOfPancakesToGenerate}\n        />\n        <StepButton onClick={() => {\n          const sortedPancakes = flipPancakes(pancakes)\n          setPancakes(sortedPancakes)\n          setAreAllPancakesHappy(checkIfAllPancakesAreHappy(sortedPancakes))\n          setFlipCount(pancakeFlipCount + 1)\n          }}\n          disabled={areAllPancakesHappy}\n        >\n          Single Flip\n        </StepButton>\n        <SortButton onClick={() => {\n          const {pancakes: sortedPancakes, flipCount } = sortPancakeStack(pancakes, pancakeFlipCount)\n          setAreAllPancakesHappy(checkIfAllPancakesAreHappy(sortedPancakes))\n          setPancakes(sortedPancakes)\n          setFlipCount(flipCount)\n          }}\n          disabled={areAllPancakesHappy}\n        >\n          Sort\n        </SortButton>\n      </ControlPanel>\n\n      <StatsContainer>\n          <StatBox>\n            <p>Flip Count: {pancakeFlipCount}</p>\n            <img src='https://image.flaticon.com/icons/png/512/83/83532.png' alt='spatula' />\n          </StatBox>\n          <StatBox>\n            <p>Are all pancakes happy? {areAllPancakesHappy ? 'Yes' : 'No'}</p>\n            <img\n              src={areAllPancakesHappy ? 'https://image.flaticon.com/icons/png/512/25/25361.png' : 'https://static.thenounproject.com/png/319226-200.png'}\n              alt='face'\n            />\n          </StatBox>\n      </StatsContainer>\n      <PancakesContainer>\n        {pancakes.split('').map((pancake) => <Pancake isHappy={pancake === '+'} />)}\n        <CenteredText>{pancakes}</CenteredText>\n      </PancakesContainer>\n    </Container>\n  )\n}\n\nexport default SingleStackPancakeSorter\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { sortPancakeStacks } from './utils'\n\nimport {\n  Container,\n  ControlPanel,\n  SortButton,\n  StatsContainer,\n  StatBox,\n  InputFull\n} from './styles'\n\nconst Header = styled.h1`\n  width: 100%;\n  text-align: center;\n`\n\n\nexport const PancakeFactory = () => {\n  const [pancakeStacks, setPancakeStacks] = useState([])\n  const [pancakeStacksResults, setPancakeStacksResults] = useState([])\n  const [numberOfTestCases, setNumberOfTestCases] = useState(0)\n\n  // Ensure only '-', '+' and ',' are input\n  const cleanAndSetInput = (value) => {\n    const filtered = value.split('').filter((value) => value.match(/[-+,]/))\n    setPancakeStacks(filtered.join(''))\n    setNumberOfTestCases(value.split(',').length)\n  }\n\n  return (\n    <Container>\n      <Header>Sort multiple stacks of pancakes at once!!</Header>\n      <p>\n        Enter in your pancakes in a comma seporated list. '+'\n        being happy side up and '-' being plain side up.\n      </p>\n      <small>Only '-', '+', ',' are allowed in the input. Ex '--,++,--++-+'</small>\n      <ControlPanel>\n        <InputFull\n          onChange={({ target }) => cleanAndSetInput(target.value)}\n          value={pancakeStacks}\n        />\n        <SortButton onClick={() => setPancakeStacksResults(sortPancakeStacks(pancakeStacks))}>\n          Sort Stacks\n        </SortButton>\n      </ControlPanel>\n      <StatsContainer>\n        {pancakeStacksResults.map(({originalStack, flipCount}, index) => (\n          <StatBox key={index}>\n            <p>Case # {index + 1}</p>\n            <p>Original Stack:</p>\n            <strong>{originalStack}</strong>\n            <p>Minimum Flip Count: {flipCount}</p>\n          </StatBox>\n        ))}\n      </StatsContainer>\n      <p>Number of test cases: {numberOfTestCases}</p>\n    </Container>\n  )\n}\n\nexport default PancakeFactory\n","import React from 'react';\nimport styled from 'styled-components'\n\nimport SingleStackPancakeSorter from './single-stack-pancake-sorter.js'\nimport MultiStackPancakeSorter from './multi-stack-pancake-sorter.js'\n\nconst PageContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: row wrap\n  align-items: flex-start;\n  width: 100vw;\n  height: 100vh;\n  background: linear-gradient(135deg, #f6e6b4 0%,#ed9017 100%);\n  overflow: scroll;\n  padding-bottom: 120px;\n`\n\nconst PageHeader = styled.h1`\n  flex: 1 1 100%;\n  margin: 16px;\n  text-align: center\n`\n\nconst AppContainer = styled.div`\n  flex: 0 1 480px;\n  margin: 0 auto;\n  background: #fff;\n  border-radius: 8px;\n  border: 1px solid gray;\n  overflow: hidden;\n`\n\nfunction PancakesRevengeApp() {\n  return (\n    <PageContainer>\n      <PageHeader>Pancakes Revenge</PageHeader>\n      <AppContainer>\n        <SingleStackPancakeSorter />\n        <MultiStackPancakeSorter />\n      </AppContainer>\n    </PageContainer>\n  );\n}\n\nexport default PancakesRevengeApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}